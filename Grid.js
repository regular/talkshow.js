// Generated by CoffeeScript 1.3.3
(function() {
  var Grid;

  Grid = (function() {

    function Grid(cols, rows, dataSource) {
      this.cols = cols;
      this.rows = rows;
      this.dataSource = dataSource;
      this.positions = {
        vert: [],
        horiz: []
      };
    }

    Grid.prototype.reloadFromDataSource = function(dataSource, cb) {
      var q, td, tr, x, y, _i, _ref, _results,
        _this = this;
      console.log("Loading data from source");
      if (cb === void 0) {
        console.trace();
      }
      this.dataSource = dataSource;
      q = async.queue(function(_arg, cb) {
        var td, x, y;
        td = _arg.td, x = _arg.x, y = _arg.y;
        return dataSource.cellForPosition(x, y, function(err, newTd) {
          if (!(err != null)) {
            td.replaceWith(newTd);
          }
          return cb(null);
        });
      }, 3);
      q.drain = function() {
        var x, y, _i, _j, _ref, _ref1;
        for (y = _i = 0, _ref = _this.rows; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
          _this.positions.vert.push($("#grid table tr").eq(y).offset().top);
        }
        for (x = _j = 0, _ref1 = _this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          _this.positions.horiz.push($("#grid table tr").eq(0).find("td").eq(x).offset().left);
        }
        return cb(null);
      };
      $("#grid").html("<table>");
      _results = [];
      for (y = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        tr = $("<tr>");
        $("#grid table").append(tr);
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            td = $("<td>");
            tr.append(td);
            _results1.push(q.push({
              td: td,
              x: x,
              y: y
            }));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Grid.prototype.zoomIntoCell = function(x, y, cb) {
      return cb();
    };

    return Grid;

  })();

  window.Grid = Grid;

}).call(this);
